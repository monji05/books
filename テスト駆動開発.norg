@document.meta
title: テスト駆動開発
description:
authors: eriko
categories:
created: 2024-01-03
version: 1.0.0
@end

* 26.レッドバーのパターン
 ** はじめのテスト
    初めのテストは「何もしないこと」のテストから始めよう
    機能を書き始めるときの最初の問いは「この機能はどこの責務か」だ
    それが決められなければテストはかけない
    初めのテストにはそこから学べそうでかつすぐに書けそうなテストを選ぼう
 ** 回帰テスト
    不具合が報告されたとき、まずやるべきことはその不具合を再現させる(=仕様ではこうであるはず)テストをかいて、それが失敗することを確認する
    そのテストが通れば、不具合が修正されたということになる
    本来このテストはコードを書いているときに書くべきテストだ
    だから、どうやったらコーディング中に「書かないといけないということ」に気づけたかを考えるべきだ

* 27.Self Shunt(自己接続)パターン
** テスト対象オブジェクトが本物だと思って話している相手が実はテストケース自身だというテストを書いてみる
   TestResultに登録されたオブジェクトは通知を受けられるようになるとする
   いま、個別のテスト終了通知を受けるたびに画面を更新したい
   @code python
   # ResultListenerTest.py
   def testNotification(self):
     result = TestResult()
     listener = ResultListener()
     result.addListener(listener)
     WasRun("testMethod").run(result)
     assert(1 == listener.count)

   # ResultListener.py
   class ResultListener:
     def __init__(self):
       self.count = 0

     def startTest(self):
       self.count = self.count + 1
   @end

   ここで、本物のResultListenerが必要だろうかと考える
   テストケース自身がモックオブジェクトのように振る舞える
   @code python
   # 修正後のResultListenerTest.py
   def testNotification(self):
     self.count = 0
     result = TestResult()
     result.addListener(listener)
     WasRun("testMethod").run(result)
     assert(1 == self.count)

   # テストが走ると呼ばれる
   def startTest(self):
     self.count = self.count + 1
   @end

** 失敗させたままのテスト
   時間の終わりが来たときには、テストコードを書いてそのテストが必ず失敗するように書く
   そうしておけば、次にコーディングするときにどこから始めるべきかは明白だ
   失敗させたままのテストはプログラムの現状を明らかにしていると考えれば、精神的にもプラスにはたらく

* 32.TDDを身につける
** どのようなときにテストを消すべきか
   2つのテストが同じコードを実行していても異なるシナリオというのであれば消さずに残す

** 途中からTDDに乗り換えるにはどうすれば良いか
   自動テストを伴わないリファクタリングには失敗が待っている、テストがないので失敗かどうかわからない
