* 1. Linuxの概要
** プログラムとプロセス
   マシンの電源を入れると、最初にカーネルが起動する。
   起動後に動作中のプログラムを *プロセス* という。
   カーネルはハードウェアの助けを借りてプロセスからデバイスに直接アクセスできないようにしている。
   具体的にCPUに備わるモードという機能を使う。
   CPUがカーネルモードであればなんの制限もないのに対し、ユーザモードで実行中ならば特定の命令を実行できないようにする、のような制約をかけられる。
   Linuxの場合はカーネルのみがこのカーネルモードで動作して、デバイスにアクセスできる。
   それに対してプロセスはユーザモードで動作するため、デバイスにアクセスできない。
   このため、プロセスは *カーネルを介して* デバイスにアクセスする。
   つまり、システム内のすべてのプロセスが享有するリソースを一元管理して、システム上で動作するプロセスに配分する
   そのためにカーネルモードで動作するプログラムが *カーネルである*。
** システムコール
   システムコールとは、 *プロセスがカーネルに処理を依頼する* ための方法である。
   新規プロセスの生成やハードウェアの操作など、カーネルの助けが必要な場合に使う。
    - プロセス生成、削除
    - メモリ確保、解放
    - 通信処理
    - ファイルシステム操作
    - デバイス操作
   などがシステムコール。
   システムコールは、CPUの特殊な命令を実行することによって実現している。
   カーネルに処理を依頼するためにシステムコールを発行すると、CPUにおいて *例外というイベント* が発生する。
   これをきっかけとして、CPUのモードがユーザモードからカーネルモードに遷移し、依頼内容に応じたカーネルの処理が動き始める。
   システムコールが終われば、ユーザモードに戻りプロセスの動作を継続する。

** ライブラリ
   多くのプログラミング言語では複数のプログラムに共通する処理をライブラリとしてまとめる機能がある。

** 標準Cライブラリ
   C言語には国際標準化機能（ISO）によって定められた標準ライブラリがある。

** システムコールのラッパー関数
   システムコールは通常の関数呼び出しと違ってC言語などの高級言語から直截呼び出せない。
   アーキテクチャ依存のアセンブリコードを使って呼び出す必要がある。
   libcは内部的にシステムコールを呼び出すだけのシステムコールのラッパーと呼ばれる一連の関数を提供している。
   高級言語で書かれたユーザプログラムからは、各言語に対して用意されているシステムコールのラッパー関数を呼び出すだけで済む。

** 静的ライブラリと共有(動的)ライブラリ
   プログラムの生成時にコンパイルしてオブジェクトファイルというファイルを作る。
   そのうえでオブジェクトファイルが使うライブラリをリンクして実行ファイルを作る。
   静的ライブラリはリンク時にライブラリ内の関数をプログラムに組み込む。
   これに対して共有ライブラリはリンク時に「このライブラリのこの関数を呼び出す」といった情報だけを実行ファイルに埋め込む。
   そのうえでプロブラムの起動時、あるいは実行中にライブラリをメモリ上にロードしてプログラムはその中の関数を呼び出す。

* プロセス管理（基礎編）
** プロセスの生成
   あたらしくプロセスを生成する目的は2つ。
   ~~ 同じプログラムの処理を複数のプロセスに分けて処理する。（例：webサーバーによる複数リクエストの受付）
   ~~ 別のプログラム生成する（例：bashから各種プログラムの新規作成）

** ゾンビプロセスと孤児プロセス
   子プロセスが終了しても親プロセスが終了状態を得ていないという状態のプロセスをゾンビプロセスという。
   システム起動中にゾンビプロセスが大量に存在している場合、親プロセスに対応するプログラムの *バグを疑う* といい。

** シグナル
   あるプロセスが他のプロセスになにかを通知して、外部から実行の流れを強制的に変えるための仕組みである。

** シェルのジョブ管理の実現
   ジョブとは、bashのようなshellがバックグラウンドで実行したプロセスを制御するための仕組み。
   セッションはユーザがgtermのような端末エミュレータ、あるはsshなどを通してシステムにログインしたときのログインセッションに対応するもの。
   すべてのセッションには、セッションを制御するための端末が紐づいている。
   セッションにはセッションID、あるいはSIDと呼ばれる一意な値が割り振られている。
   セッションリーダーというプロセスが１つ存在していて、通常はbashなどのshellになる。

** プロセスグループ
   プロセスグループは、復数のプロセスをまとめてコントロールするためのもの。
   セッションの中には復数のプロセスグループが存在する。

** デーモン
   デーモンは常駐プロセスのこと。
   普通のプロセスはユーザが立ち上げてから何らかの一連の処理をしてから終了することが前提。
   デーモンはシステムの開始から終了まで存在し続ける。
   デーモンの特徴は
   - 端末から入出力する必要がないので、端末が割り当てられていない。
   - あらゆるログインセッションが終了しても影響を受けないように、独自のセッションを持つ。
   - デーモンを生成したプロセスがデーモンの終了を気にしなくていいように、initが親になっている。
   上記の条件に当てはまらないものも、常駐プロセスであれば便宜的にデーモンと呼ばれることもある。

* プロセススケジューラ
  システムに存在するプロセスは、ほとんどスリープ状態だが、ではシステムに複数の実行可能プロセスが存在する場合、カーネルはどのように各プロセをCPU上で実行させるのだろう？

** コンテキストスイッチ
   論理CPU上で動作するプロセスが切り替わることをコンテキストスイッチという。



























