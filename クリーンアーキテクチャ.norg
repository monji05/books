@document.meta
title: クリーンアーキテクチャ
description:
authors: eriko
categories:
created: 2024-01-18
version: 1.0.0
@end

* 何が間違っていたか?
  自信過剰による再設計は元のプロジェクトと同じように崩壊する

* 2つの価値のお話
  ソフトウェアの１つ目の価値は「振る舞い」である。
  ステークホルダーのためにお金を生み出したり、節約したりできるようにソフトウェアに振る舞いを与えるために雇用されている。
  プログラマーはマシンが要件を満たすことを自分の仕事だと勘違いしている。

  ２つ目の価値は「ソフトウェア」という言葉に関係している。
  「ソフト」と「ウェア」の複合語で、「ウェア」は「プロダクト」を意味する。
  ソフトウェアは「ソフト」になるように考案されたもの。
  マシンの振る舞いを簡単に変更する手段になることを目的としたものである。
  簡単に変更したくないときはそれを「ハード」ウェアとよんだ。
  ステークホルダーが機能を変更したいと思えば、その変更は簡単にできるようになっておくべきだ。
  変更の難易度は変更の「形状」ではなく、変更の「スコープ」に比例しなければならない。
  ソフトウェア開発のコストの増加の背景に、こうした「スコープ」と「形状」の違いがある。
  要件の変更のサイズに対して、不釣り合いなほどコストがかかるのはそのため。
  この問題はもちろんシステムのアーキテクチャの問題である。
  したがって、形状にとらわれないアーキテクチャにした方が実用的である。
** アイゼンハワーのマトリックス
   ソフトウェアの１つ目の価値（振る舞い）は緊急だが、常に重要とは限らない。
   ソフトウェアの２つ目の価値（アーキテクチャ）は重要だが、常に緊急とは限らない。
   ビジネスマネージャーやプログラマーのよくある間違いはシステムの重要ではないことを優先して、システムの重要なアーキテクチャを無視することにつながる。
   ソフトウェア開発チームには、機能の緊急性よりも、アーキテクチャの重要性を強く主張する責任が求められる。
   優れた開発チームは真正面から闘争に立ち向かう。
   ステークホルダーたちと対等にひるむことなく口論する。
   ソフトウェア開発チームもステークホルダーであることは忘れてはいけない。

* 構成要素から始めよ:プログラミングパラダイム
  パラダイムとは、プログラミング方法のことである。言語とは比較的関係のないものである。
  パラダイムはどのプログラミング構造を使うべきか、それをいつ使うべきかを教えてくれる。

* 設計の原則
  SOLID原則は、関数やデータ構造をどのようにクラスに組み込むのか、そしてクラスの相互接続をどのようにするのかということを教えてくれる。
  「クラス」という用語を使ったからといって、これらの原則がオブジェクト指向ソフトウェアにしか通用しないわけではない。
  ここでいうクラスとは単にいくつかの機能やデータを取りまとめたものを指しているに過ぎない。
  SOLID原則の目的は、以下のような性質をもつ中間レベルのソフトウェア構造を作ることだ。
  - 変更に強いこと
  - 理解しやすいこと
  - コンポーネントの基礎として、多くのソフトウェアシステムで利用できること

  SOLID原則
  - 単一責任の原則(SRP)
  - オープン・クローズドの原則(OCP)
  - リスコフの置換原則(LSP)
  - インターフェース分離の原則(ISP)
  - 依存関係逆転の原則(DIP)

* SRP:単一責任の原則
  SOLID原則の中で一番誤解されやすい原則。
  たしかに、名前だけ聞くと、ひとつの関数に一つのことしかだけをおこなうものという原則はあるが、それを適用するのは最下位のレベル。
  本質的な原則は
  「モジュールを変更する理由はたった一つだけであるべきである。」
  「ユーザーやステークホルダー」こそが、単一責任の原則(SRP)がさす「変更する理由」である。
  つまり、この原則は以下のように言い換えられる。
  「モジュールはたった一人のユーザーやステークホルダーに対して責務を負うべきである。」
  たった一人のユーザーを個々に考えることは稀で、複数のユーザーや、ステークホルダーがシステムを同じように変更したいと考えることもある。
  変更を望む人たちをひとまとめにしたグループで、アクターと呼ぶことにする。
  とすると、最終的には
  *「モジュールはたった一つのアクターに対して責務を負うべきである。」*
  ここでいうモジュールとはソースファイルのことである。
  ソースファイル以外のところにコードを格納する言語や開発環境も存在する。
  そのような場合の「モジュール」は、いくつかの関数やデータをまとめた *凝集性のあるもの* だと考えればOK。
  「凝集性のある」というのが単一責任の原則(SRP)を匂わせる。
  この原則に違反している例をみると理解しやすい
** 症例1: 想定外の重複
  CFO,COO,CTOという異なる３つのアクターを一つのEmployeeクラスに集約してしまうと、CFOしか操作しないメソッドも他のアクターも見えてしまったり、
  既存のメソッドに手を加えて、もともとそのメソッドを呼び出していた処理が今までと全く違う値が返ってきてバグになるケースもある。
  なので、単一責任の原則は、 *アクターの異なるコードは分割するべき* という原則
** 症例2: マージ
** 解決策
   データを関数から切り離す。
   ３つのクラスからEmployeeDataクラスを使うようにする。
   ３つのクラスはそれぞれ、特定の機能に必要なソースコードだけを保持している。
   また他のクラスについて知ることは許可されていない。
   こうしておけば想定外の重複は避けられる。
   これには弱点があり、開発者が３つのクラスをインスタンス化して追跡しなければならないということ。
   このジレンマを解決するために、一般的に使われるのが、Facadeパターン。

* OCP:オープンクローズドの原則
  ソフトウェアの構成要素は拡張に対しては開いていて、修正に対して閉じていなければならない。
  言い換えれば、 *「ソフトウェアの振る舞いは、既存の成果物を変更せず拡張できるようにすべきである。」*  ということだ。
  オープンクローズドの原則に最も適しているのは、ビジネスロジックを含んでいるクラスである。
  「レベル」の概念に基づいた保護の階層ができていることに注目する。
  図8-3のViewは最下位のレベルの概念なので、保護レベルは最も低い。つまり、自身に依存しているクラスはないもしくは少ない。
  上位レベルにあるコンポーネントは、下位レベルのコンポーネントを変更されたとしても、変更する必要がないように設計する
** 情報隠蔽
   図8-3のFinancialReportRequesterインターフェースは、依存関係の逆転とは *別の役割を担っている。*
   これは、FinancialReportControllerがInteractorの内部を知りすぎないように保護することである。
   このインターフェースがないとControllerはFinancialEntitiesに依存してしまう。
   ControllerもまたInteractorの変更から保護しておきたい。
   そのためにInteractorの内部を隠蔽している。
** まとめ
   OCPを達成するためには、システムをコンポーネントに分割して、コンポーネントの依存関係を階層構造に分割する。
   そして、上位レベルのコンポーネントが下位レベルのコンポーネントの変更の影響を受けないようにする。

* LSP: リスコフの置換原則
  *型がSのオブジェクトo1の各々に対応する型Tのオブジェクトo2があり、Tを使ったプログラムに対してo1を使っても振る舞いが変わらない場合、SはTの派生型と言える。*
** リスコフの置換原則(LSP)とアーキテクチャ
   インターフェースと実装に関するソフトウェア設計の原則になっている。
   (インターフェースを実装すれば、おのずと依存関係逆転とLSPを達成することになる？)
** まとめ
   LSPはアーキテクチャのレベルで適用すべき。
   置換可能性に少しでも違反してしまうと、システムのアーキテクチャが特別な仕組みだらけになってしまう。

* ISP: インターフェース分離の原則
  Javaだとimportやuseで依存をさせるのでそのために再コンパイルや再デプロイが必要になってしまう。
  動的型付け言語だとこうした宣言はないので、再コンパイルや再デプロイを強要しなくなるので、
  ここだけをみると動的型付け言語の方が柔軟で疎結合なシステムを作れる最大の理由である。

* DIP: 依存関係逆転の原則
  *ソースコードの依存関係が（具象ではなく）抽象だけを参照しているもの。 それが最も柔軟なシステムである*
** 安定した抽象
   コーディングルール
   - 変化しやすい具象クラスを参照しない
   - 変化しやすい具象クラスを継承しない
   - 具象関数をオーバーライドしない
   - 変化しやすい具象を名指しで参照しない=DIPそのもの
** Factory
   上記のルールに従おうとすると、具象オブジェクトを生成する際に特別な処理（Abstract Factoryパターン）が必要だ。

* コンポーネントの原則
  *コンポーネントとは、デプロイの単位である。*
  システムの一部としてデプロイできる、最小限のまとまりを指す。
  Javaならjarファイル、Rubyならgemファイルで、コンパイル型言語ならバイナリファイル、インタプリタ型言語ならソースファイルになる。
  よくできたコンポーネントは常に個別にデプロイできる状態を保っているので、個別に開発を進められる。
** コンポーネントの簡単な歴史
   昔のプログラムはリロケータブル（再配置可能）ではなかった。
** リロケータビリティ(再配置可能性)
   メモリに決まったサイズにプログラムを配置しているので、追加したプログラムは別の場所に置かないといけない。
   この解決策が、リロケータブルなバイナリだった。
   *コンパイラが出力するバイナリコードに手を加えて、スマートローダでメモリに再配置できるにしたのだ。*
   ローダにはリロケータブルなコードをどこにロードするかが伝えられる。
   リロケータブルなコードにはフラグが組み込まれていて、どの部分をどのアドレスにロードする必要があるかを示している。
   通常は、バイナリのメモリ参照アドレスに開始アドレスを追加するだけだった。
   これでプログラマは関数ライブラリとアプリケーションをどこにロードするかを指示できるようになった。
   実際には、ロードが受け取ったバイナリ入力をそのままの順番でメモリに再配置しているだけだ。
   その結果、プログラマは必要な関数だけをロードできるようになった。

   その後、コンパイラにさらに手を加えて、リロケータブルなバイナリのメタデータとして関数名を出せるようにした。
   プログラムからライブラリ関数が呼ばれたら、コンパイラはその関数名を *外部参照として出力する。*

   プログラムがライブラリ関数を定義するときは、コンパイラはその関数名を外部定義として出力する。
   これにより、外部定義をどこにロードするかが決まれば、ローダが外部参照をリンクできるようになった。
   *リンクローダの誕生である。*
** リンカ
   最終的にリンクローダの処理が重過ぎて使えない状況になった。
   そこで、結局はロードとリンクをそれぞれ別のフェーズに分けることになった。
   遅い部分（リンクの処理）をリンカと呼ばれる別のアプリケーションに切り出した。
** まとめ
   動的にリンクされたファイルを実行時にプラグインできる。
   これがアーキテクチャにおけるソフトウェアコンポーネントだ。

* コンポーネントの凝集性
  どのクラスをどのコンポーネントに含めればいいのだろう？
  コンポーネントの凝集性に関する以下の原則を取り上げる。
  - 再利用・リリース等価の原則(REP)
  - 閉鎖性共通の原則(CCP)
  - 全再利用の原則(CRP)
** 再利用・リリース等価の原則(REP)
   *再利用の単位とリリースの単位は等価になる。*
   この原則をソフトウェア設計やアーキテクチャの観点で考えると、*コンポーネントを形成するクラスやモジュールは凝集性のあるグループでなければいけない* という意味になる。
   コンポーネントには一貫する *テーマや目的があり*、それを共有するモジュールを集めなければいけない。
** 閉鎖性共通の原則(CCP)
   *同じ理由、同じタイミングで変更されるクラスをコンポーネントにまとめること。*
   *変更の理由やタイミングが異なるクラスは、別のコンポーネントに分けること*
   これは単一責任の原則(SRP)をコンポーネント向けに言い換えたもの。
   これをさらに噛み砕いて
   *変更の種類が似ているクラスを一つのコンポーネントにまとめる* とした。
   こうすると、変更箇所を最小限に抑えられる
** 全再利用の原則(CRP)
   *コンポーネントのユーザーに対して、実際には使わないものへの依存を強要してはいけない。*
   CRPは、どのクラスをひとまとめにするべき *ではない* かを伝える原則である。
*** インターフェース分離の原則(ISP)との関係
    CRPはISPを一般化したものになる
    *不要なものには依存しないこと*
** まとめ
   どのクラスをコンポえにまとめるかを決めるときには、開発時の利便性と再利用性のトレードオフを考慮する必要がある。
   実装の初期段階ではREPを考慮せず、CCP重視する傾向にある。開発しやすいからだ。

* コンポーネントの結合
  次に挙げる3つの原則は、コンポーネントの関連を扱うものだ。
** 非循環依存関係の原則(ADP)
   *コンポーネントの依存グラフに循環依存があってはいけない。*
   これは大規模プロジェクトで開発者が同じソースコードを扱っていて、一向に安定版をビルドできない問題を解決する。
*** 循環依存の除去
    この問題を解決するには、開発環境をリリース可能なコンポーネントに分割すること。
    これを機能させるには、コンポーネントの依存構造をきちんと管理しておく必要がある。
    *循環依存があってはいけない。*
    = どのコンポーネントからスタートしても元のコンポーネントに戻らない。
    = 有向循環グラフと呼ぶ。
** 安定依存の原則(SDP)
   安定度の高い方向に依存すること。
   閉鎖性共通の原則(CCP)を満たす=特定の変更以外には影響を受けないコンポーネントを作ることができる。
   変動を想定したコンポーネントは変更しづらいコンポーネントから依存されてはいけない。
*** 安定度
    ソフトウェア上での安定とは、変更しづらいものである。
    = 多数のコンポーネントから依存されるようにすればいい。
    少しだけでも変更したら他のコンポーネントとの調整が必要だからだ。
    例えば、３つのコンポーネントがXに依存しているということは、このコンポーネントを変更する理由は３つあるということ。
    このとき、Xは３つのコンポーネントに対する *責務* を負っている。
    逆にXはほかのコンポーネントに依存していない。 つまり、外部要因で変更が必要になることはない。これを独立コンポーネントという。
****** 全てのコンポーネントに高い安定度を求める必要はない。
** 安定度・抽象度等価の原則(SAP)
   コンポーネントの抽象度は、その安定度と同程度でなければならない。
*** 上位レベルの方針をどこに適用するか
    上位レベルの方針を安定度の高いコンポーネントに配置すると、その方針を表現しているソースコードを変更しづらくなる。
    これを解消するにはOCPにある。これは既存コードを変更せずに拡張できるようにしておくというものだ。
    これを満たすクラスとは？そう、抽象クラスだ。
*** 安定度・抽象度等価の原則(SAP)の導入
    これは安定度と、抽象度の関係についての原則だ。
****** 安定度の高いコンポーネントは、抽象度も高くあるべきで、安定度の高さが拡張の妨げになってはいけないと主張している。
    したがって、コンポーネントの安定度を高くしようと思えば、拡張できるようにインターフェースと抽象クラスで構成すべきである。
    安定度が高く、拡張可能なコンポーネントは柔軟になり、アーキテクチャの制約も少なくなる。
****** 抽象度が高くなる方向に依存すべきである。
****** 苦痛ゾーン、無駄ゾーンにコンポーネントがプロットされるべきではない
    主系列の定義を(安定度,抽象度) = (1,0)と(0,1)をつなぐ直線になる。
****** コンポーネントの理想的な場所は、主系列の両端のどちらかである。
* ビジネスルール
  最重要ビジネスルールとは、ビジネスにとって欠かせないものであり、システムが存在しなくても存在するもの。
  最重要ビジネスデータとは、システムが自動化されていなくても、存在するデータである。
  これらは密接に結びついているので、オブジェクトの有力な候補になる。
****** このオブジェクトをエンティティと呼ぶことにする。
  *エンティティを作るときはビジネスにとって不可欠な概念を実装するソフトウェアをまとめ、これから構築するシステムから切り離すようにする。*
******* つまりエンティティクラスは独立させる。エンティティはビジネスであり、それ以外の何者でもない。
** ユースケース
   ユースケースとは、自動化されたシステムを使用する方法を記述したものである。
****** ユースケースはアプリケーション固有のビジネスルールを記述しているオブジェクト。
   ユースケースは入力データを期待し、出力するデータを生成する。エンティティと同じで、独立していてどこにも依存していない。


